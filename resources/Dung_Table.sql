CREATE DATABASE IF NOT EXISTS it_course_management;
USE it_course_management;

CREATE TABLE LECTURE (
    LECTUREID INT PRIMARY KEY AUTO_INCREMENT,
    LECTURENAME NVARCHAR(512) NOT NULL,
    COURSEID INT NOT NULL,
    VIDEOURL VARCHAR(1024),
    DURATION SMALLINT,
    LECTUREDESCRIPTION VARCHAR(512),
    FOREIGN KEY (COURSEID) REFERENCES COURSES(COURSEID)
);

CREATE TABLE LECTUREPROGRESS (
    USERID INT NOT NULL,
    LECTUREID INT NOT NULL,
    STATUS ENUM('in-progress', 'done', 'unfinished') NOT NULL,
    PRIMARY KEY (USERID, LECTUREID),
    FOREIGN KEY (USERID) REFERENCES USERS(USERID),
    FOREIGN KEY (LECTUREID) REFERENCES LECTURE(LECTUREID)
);

CREATE TABLE CATEGORIES (
    CATEGORYID INT PRIMARY KEY AUTO_INCREMENT,
    CATEGORYNAME NVARCHAR(512) NOT NULL
);

CREATE TABLE COURSECATEGORIES (
    COURSEID INT NOT NULL,
    CATEGORYID INT NOT NULL,
    PRIMARY KEY (COURSEID, CATEGORYID),
    FOREIGN KEY (COURSEID) REFERENCES COURSES(COURSEID),
    FOREIGN KEY (CATEGORYID) REFERENCES CATEGORIES(CATEGORYID)
);

CREATE TABLE MYLEARNING (
    USERID INT NOT NULL,
    COURSEID INT NOT NULL,
    COURSESTATUS ENUM('in-progress', 'finished') NOT NULL,
    LASTACCESSEDAT DATETIME,
    PRIMARY KEY (USERID, COURSEID),
    FOREIGN KEY (USERID) REFERENCES USERS(USERID),
    FOREIGN KEY (COURSEID) REFERENCES COURSES(COURSEID)
);

CREATE TABLE CERTIFICATE (
    CERTIFICATEID INT PRIMARY KEY AUTO_INCREMENT,
    CERTIFICATENAME NVARCHAR(512) NOT NULL,
    COURSEID INT NOT NULL,
    FOREIGN KEY (COURSEID) REFERENCES COURSES(COURSEID)
);

CREATE TABLE USERCERTIFICATE (
    CERTIFICATEID INT NOT NULL,
    USERID INT NOT NULL,
    ISSUEDATE DATE NOT NULL,
    PRIMARY KEY (CERTIFICATEID, USERID),
    FOREIGN KEY (CERTIFICATEID) REFERENCES CERTIFICATE(CERTIFICATEID),
    FOREIGN KEY (USERID) REFERENCES USERS(USERID)
);

CREATE TABLE MYWISHLIST (
    USERID INT NOT NULL,
    COURSEID INT NOT NULL,
    ADDEDAT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (USERID, COURSEID),
    FOREIGN KEY (USERID) REFERENCES USERS(USERID),
    FOREIGN KEY (COURSEID) REFERENCES COURSES(COURSEID)
);

