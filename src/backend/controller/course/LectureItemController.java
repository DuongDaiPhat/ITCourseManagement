package backend.controller.course;
import javafx.beans.binding.Bindings;
import javafx.beans.property.DoubleProperty;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;
import javafx.util.Duration;
import model.lecture.Lecture;

import java.io.File;
import java.util.Arrays;

public class LectureItemController {

    @FXML private VBox lectureItemContainer;
    @FXML private Label lectureTitleLabel;
    @FXML private MediaView mediaView;
    @FXML private StackPane mediaViewContainer;
    @FXML private Button playButton;
    @FXML private Slider progressSlider;
    @FXML private Label currentTimeLabel;
    @FXML private Label totalDurationLabel;
    @FXML private Button muteButton;
    @FXML private Slider volumeSlider;
    @FXML private ComboBox<String> playbackRateComboBox;
    @FXML private Label descriptionArrow;
    @FXML private VBox descriptionContent;
    @FXML private TextFlow lectureDescriptionText;
    @FXML private Text descriptionText;
    
    private MediaPlayer mediaPlayer;
    private boolean isPlaying = false;
    private boolean isMuted = false;
    private boolean isDescriptionExpanded = true;
    
    // M√¥ h√¨nh d·ªØ li·ªáu cho b√†i gi·∫£ng
    private Lecture lecture;
    
    @FXML
    public void initialize() {
        // Kh·ªüi t·∫°o ComboBox t·ªëc ƒë·ªô ph√°t
        playbackRateComboBox.setItems(FXCollections.observableArrayList(
            "0.5x", "0.75x", "1.0x", "1.25x", "1.5x", "2.0x"
        ));
        playbackRateComboBox.setValue("1.0x");
        playbackRateComboBox.setOnAction(e -> changePlaybackRate());
        
        // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã m√¥ t·∫£
        descriptionContent.setVisible(true);
        descriptionContent.setManaged(true);
        descriptionArrow.setText("‚ñº");
        
        // G·∫Øn MediaView v√†o container
        DoubleProperty mvw = mediaView.fitWidthProperty();
        DoubleProperty mvh = mediaView.fitHeightProperty();   
        mediaView.fitWidthProperty().bind(mediaViewContainer.widthProperty());
        mediaView.fitHeightProperty().bind(mediaViewContainer.heightProperty());
        mediaView.setPreserveRatio(true);
        // Thi·∫øt l·∫≠p volumeSlider
        volumeSlider.setValue(100);
        volumeSlider.valueProperty().addListener((observable, oldValue, newValue) -> {
            if (mediaPlayer != null) {
                double volume = newValue.doubleValue() / 100.0;
                mediaPlayer.setVolume(volume);
                updateVolumeButton(volume);
            }
        });
        
        // Thi·∫øt l·∫≠p progressSlider
        progressSlider.valueChangingProperty().addListener((obs, wasChanging, isChanging) -> {
            if (!isChanging && mediaPlayer != null) {
                mediaPlayer.seek(Duration.seconds(progressSlider.getValue()));
            }
        });
    }
    
    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ thi·∫øt l·∫≠p d·ªØ li·ªáu b√†i gi·∫£ng
    public void setLecture(Lecture lecture) {
        this.lecture = lecture;
        
        // C·∫≠p nh·∫≠t UI v·ªõi d·ªØ li·ªáu b√†i gi·∫£ng
        lectureTitleLabel.setText(lecture.getLectureName());
        descriptionText.setText(lecture.getLectureDescription());
        
        // T·∫£i video
        loadVideo(lecture.getVideoURL());
    }
    
    private void loadVideo(String videoUrl) {
        try {
            // Gi·∫£i ph√≥ng t√†i nguy√™n n·∫øu ƒë√£ c√≥ mediaPlayer tr∆∞·ªõc ƒë√≥
            if (mediaPlayer != null) {
                mediaPlayer.dispose();
            }
            
            // T·∫°o Media object t·ª´ URL
            File videoFile = new File(videoUrl);
            Media media = new Media(videoFile.toURI().toString());
            
            // T·∫°o MediaPlayer
            mediaPlayer = new MediaPlayer(media);
            mediaView.setMediaPlayer(mediaPlayer);
            
            // X·ª≠ l√Ω s·ª± ki·ªán khi media s·∫µn s√†ng
            mediaPlayer.setOnReady(() -> {
                Duration totalDuration = mediaPlayer.getTotalDuration();
                totalDurationLabel.setText(formatDuration(totalDuration));
                progressSlider.setMax(totalDuration.toSeconds());
            });
            
            // C·∫≠p nh·∫≠t current time v√† progress slider
            mediaPlayer.currentTimeProperty().addListener((observable, oldValue, newValue) -> {
                if (!progressSlider.isValueChanging()) {
                    progressSlider.setValue(newValue.toSeconds());
                }
                currentTimeLabel.setText(formatDuration(newValue));
            });
            
            // X·ª≠ l√Ω khi video k·∫øt th√∫c
            mediaPlayer.setOnEndOfMedia(() -> {
                mediaPlayer.seek(Duration.ZERO);
                mediaPlayer.pause();
                isPlaying = false;
                playButton.setText("‚ñ∂");
            });
            
        } catch (Exception e) {
            System.err.println("L·ªói khi t·∫£i video: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    @FXML
    private void togglePlayPause() {
        if (mediaPlayer == null) return;
        
        if (isPlaying) {
            mediaPlayer.pause();
            playButton.setText("‚ñ∂");
        } else {
            mediaPlayer.play();
            playButton.setText("‚è∏");
        }
        
        isPlaying = !isPlaying;
    }
    
    @FXML
    private void toggleMute() {
        if (mediaPlayer == null) return;
        
        isMuted = !isMuted;
        mediaPlayer.setMute(isMuted);
        muteButton.setText(isMuted ? "üîá" : "üîä");
    }
    
    private void updateVolumeButton(double volume) {
        if (volume == 0) {
            muteButton.setText("üîá");
        } else if (volume < 0.5) {
            muteButton.setText("üîâ");
        } else {
            muteButton.setText("üîä");
        }
    }
    
    private void changePlaybackRate() {
        if (mediaPlayer == null) return;
        
        String rateString = playbackRateComboBox.getValue();
        double rate = Double.parseDouble(rateString.replace("x", ""));
        mediaPlayer.setRate(rate);
    }
    
    @FXML
    private void toggleDescription() {
        isDescriptionExpanded = !isDescriptionExpanded;
        descriptionContent.setVisible(isDescriptionExpanded);
        descriptionContent.setManaged(isDescriptionExpanded);
        descriptionArrow.setText(isDescriptionExpanded ? "‚ñº" : "‚ñ≤");
    }
    
    private String formatDuration(Duration duration) {
        int seconds = (int) Math.floor(duration.toSeconds() % 60);
        int minutes = (int) Math.floor(duration.toMinutes() % 60);
        int hours = (int) Math.floor(duration.toHours());
        
        if (hours > 0) {
            return String.format("%d:%02d:%02d", hours, minutes, seconds);
        } else {
            return String.format("%02d:%02d", minutes, seconds);
        }
    }
    
    // Gi·∫£i ph√≥ng t√†i nguy√™n khi controller kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng n·ªØa
    public void dispose() {
        if (mediaPlayer != null) {
            mediaPlayer.dispose();
        }
    }
}